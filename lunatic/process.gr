module Process

include "runtime/unsafe/wasmi32"
include "runtime/unsafe/wasmi64"
include "runtime/unsafe/conv"
include "runtime/unsafe/memory"
include "runtime/dataStructures"
include "runtime/unsafe/tags"

include "array"
include "bytes"
include "int64"
include "marshal"
include "result"

include "./api/distributed"
from Distributed use { nodeId }
include "./api/process"
from Process use {
  compileModule,
  dropModule,
  createConfig,
  dropConfig,
  configSetMaxMemory,
  configGetMaxMemory,
  configSetMaxFuel,
  configGetMaxFuel,
  configCanCompileModules,
  configSetCanCompileModules,
  configCanCreateConfigs,
  configSetCanCreateConfigs,
  configCanSpawnProcesses,
  configSetCanSpawnProcesses,
  spawn,
  sleepMs,
  dieWhenLinkDies,
  processId,
  link,
  unlink,
  kill,
}
include "./api/message"
from Message use {
  createData,
  writeData,
  readData,
  seekData,
  getTag,
  dataSize,
  send,
  receive,
}

provide record Process {
  nodeId: Int64,
  pid: Int64,
}
provide exception ReceiveTimeout
provide exception MarshalError(String)

abstract type Mailbox<a> = Int64

/* Tags 0 - 127 are reserved for special purposes. */

@unsafe
let mut currentTag = 128N

let bootstrapMailbox: Mailbox<() -> Void> = 1L

@unsafe
provide let createMailbox = () => {
  let tag = currentTag
  currentTag = WasmI64.add(currentTag, 1N)
  WasmI32.toGrain(DataStructures.newInt64(tag)): Mailbox<a>
}

@unsafe
let createData = (tag: Int64, capacity: Int64) => {
  createData(
    WasmI64.load(WasmI32.fromGrain(tag), 8n),
    WasmI64.load(WasmI32.fromGrain(capacity), 8n)
  )
  ignore(tag)
  ignore(capacity)
}

@unsafe
let writeData = (bytes: Bytes) => {
  let bytesPtr = WasmI32.fromGrain(bytes)
  let bytesWritten = writeData(
    WasmI32.add(bytesPtr, 8n),
    WasmI32.load(bytesPtr, 4n)
  )
  WasmI32.toGrain(DataStructures.newInt32(bytesWritten)): Int32
}

@unsafe
let readData = (bytes: Bytes) => {
  let bytesPtr = WasmI32.fromGrain(bytes)
  let bytesRead = readData(
    WasmI32.add(bytesPtr, 8n),
    WasmI32.load(bytesPtr, 4n)
  )
  WasmI32.toGrain(DataStructures.newInt32(bytesRead)): Int32
}

@unsafe
let seekData = (position: Int64) => {
  seekData(WasmI64.load(WasmI32.fromGrain(position), 8n))
}

@unsafe
let getTag = () => {
  WasmI32.toGrain(DataStructures.newInt64(getTag())): Int64
}

@unsafe
let dataSize = () => {
  WasmI32.toGrain(DataStructures.newInt64(dataSize())): Int64
}

@unsafe
let send = (pid: Process) => {
  let err = send(WasmI64.load(WasmI32.fromGrain(pid), 8n))
  if (WasmI32.eqz(err)) {
    Ok(void)
  } else {
    Err(void)
  }
}

@unsafe
let receive = (tags: Option<List<Int64>>, timeout: Int32) => {
  let tags = match (tags) {
    Some(tags) => Array.fromList(tags),
    None => [>],
  }

  let count = DataStructures.untagSimpleNumber(Array.length(tags))

  let tagsBuf = Memory.malloc(WasmI32.mul(count, 8n))

  for (let mut i = 0n; WasmI32.ltU(i, count); i = WasmI32.add(i, 1n)) {
    WasmI64.store(
      tagsBuf,
      WasmI64.load(
        WasmI32.fromGrain(tags[DataStructures.tagSimpleNumber(i)]),
        8n
      ),
      WasmI32.mul(i, 8n)
    )
  }

  let result = receive(
    tagsBuf,
    count,
    WasmI64.extendI32U(WasmI32.load(WasmI32.fromGrain(timeout), 4n))
  )

  match (result) {
    0n => {
      Ok(void)
    },
    9027n => Err(ReceiveTimeout),
    1n => fail "can't recieve link failed message",
    _ => fail "unknown receive error",
  }
}

@unsafe
let idPtr = Memory.malloc(8n)

/**
 * Cause the current process to sleep for the given number of milliseconds.
 * 
 * @param ms: The number of milliseconds to sleep
 */
@unsafe
provide let sleep = (ms: Int64) => {
  let ms = WasmI64.load(WasmI32.fromGrain(ms), 8n)
  sleepMs(ms)
}

@unsafe
provide let this = () => {
  let nodeId = Conv.toInt64(nodeId())
  let pid = Conv.toInt64(processId())
  { nodeId, pid }: Process
}

@unsafe
provide let send: (Process, a, Mailbox<a>) -> Result<Void, Void> =
  (
    process,
    data,
    mailbox,
  ) => {
  let payload = Marshal.marshal(data)
  createData(mailbox, Int64.fromNumber(Bytes.length(payload)))
  writeData(payload)
  send(process)
}

provide let receiveTimeout: (Int32, Mailbox<a>) -> Result<a, Exception> =
  (
    timeout,
    mailbox,
  ) => {
  Result.flatMap((_) => {
    let size = dataSize()
    let buf = Bytes.make(Int64.toNumber(size))
    readData(buf)
    Result.mapErr(msg => MarshalError(msg), Marshal.unmarshal(buf))
  }, receive(Some([mailbox]), timeout))
}

provide let receive = mailbox => {
  receiveTimeout(0l, mailbox)
}

@unsafe
provide let spawn = (func: () -> Void) => {
  let funcName = WasmI32.fromGrain("__lunatic_bootstrap")

  let result = spawn(
    0N,
    -1N,
    -1N,
    WasmI32.add(funcName, 8n),
    WasmI32.load(funcName, 4n),
    0n,
    0n,
    idPtr
  )

  let spawnId = WasmI32.toGrain(
    DataStructures.newInt64(WasmI64.load(idPtr, 0n))
  )

  if (WasmI32.eqz(result)) {
    let process = spawnId: Process
    match (send(process, func, bootstrapMailbox)) {
      Ok(_) => Ok(process),
      Err(_) => Err(spawnId: Int64),
    }
  } else {
    Err(spawnId: Int64)
  }
}

@unsafe
provide let __lunatic_bootstrap = () => {
  // The mailbox type is not propagated within this module for some reason so
  // we use an explicit type annotation.
  // https://github.com/grain-lang/grain/issues/1356
  let result: Result<() -> Void, Exception> = receive(bootstrapMailbox)
  match (result) {
    Ok(func) => func(),
    Err(ReceiveTimeout) => fail "didn't receive bootstrap message",
    Err(MarshalError(_)) => fail "corrupted bootsrap message",
    Err(_) => fail "unknown error",
  }
}
