module Spawn

from "bytes" include Bytes
from "int64" include Int64
from "result" include Result

from "lunatic" include Lunatic
use Lunatic.{ module Process }

record SomeData<a> {
  key: String,
  value: a,
}

let mailbox = Process.createMailbox()

provide let _start = () => {
  let localdata = { key: "localdata", value: 54321 }

  print("[main process] Hello from the main process!")
  print("[main process] Spawning a child...")

  let child = Result.unwrap(Process.spawn(() => {
    print("[subprocess] ðŸ‘‹ from spawned process!")
    print("[subprocess] receiving some data...")
    print(Result.unwrap(Process.receive(mailbox)))
    print("[subprocess] data within the closure:")
    print(localdata)
  }))

  print("[main process] sending some data...")

  Process.send(child, { key: "datakey", value: 42 }, mailbox)
  Process.sleep(100L)
}

provide let __lunatic_bootstrap = Process.__lunatic_bootstrap
