module Net

from "pervasives" include Pervasives
from "runtime/unsafe/conv" include Conv
from "runtime/unsafe/wasmi32" include WasmI32
from "runtime/unsafe/wasmi64" include WasmI64
from "runtime/unsafe/memory" include Memory
from "runtime/dataStructures" include DataStructures
from "runtime/numberUtils" include NumberUtils
from "bigint" include BigInt
from "string" include String

from "./api/message.gr" include Message
from "./api/networking.gr" include Networking

provide enum IPType {
  IPv4(Uint32),
  IPv6(BigInt),
}

provide record IPAddress {
  address: IPType,
  port: Uint16,
  flowInfo: Uint32,
  scopeId: Uint32,
}

primitive magic = "@magic"

provide module DNS {
  use Networking.{ resolve, resolveNext, dropDnsIterator }

  @unsafe
  let ipPointer = Memory.malloc(30n)
  @unsafe
  let _ADDRESS_OFFSET = 0n
  @unsafe
  let _TYPE_OFFSET = 16n
  @unsafe
  let _PORT_OFFSET = 20n
  @unsafe
  let _FLOW_INFO_OFFSET = 22n
  @unsafe
  let _SCOPE_ID_OFFSET = 26n

  @unsafe
  let resolveDNSIterator = id => {
    let add = (+)
    use WasmI32.{ (+) }

    let mut addresses = []

    while (
      WasmI32.eqz(
        resolveNext(
          id,
          ipPointer + _TYPE_OFFSET,
          ipPointer + _ADDRESS_OFFSET,
          ipPointer + _PORT_OFFSET,
          ipPointer + _FLOW_INFO_OFFSET,
          ipPointer + _SCOPE_ID_OFFSET
        )
      )
    ) {
      let address = match (WasmI32.load(ipPointer, _TYPE_OFFSET)) {
        4n => {
          use WasmI32.{ (<<), (|) }

          // These bytes are big endian, but WebAssembly is little endian

          let mut ip = 0n
          ip = ip | WasmI32.load8U(ipPointer, _ADDRESS_OFFSET) << 24n
          ip = ip | WasmI32.load8U(ipPointer, _ADDRESS_OFFSET + 1n) << 16n
          ip = ip | WasmI32.load8U(ipPointer, _ADDRESS_OFFSET + 2n) << 8n
          ip = ip | WasmI32.load8U(ipPointer, _ADDRESS_OFFSET + 3n)

          IPv4(WasmI32.toGrain(DataStructures.newInt32(ip)))
        },
        6n => {
          use WasmI64.{ (<<), (|) }

          // These bytes are big endian, but WebAssembly is little endian

          let mut high = 0N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET) << 56N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 1n) << 48N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 2n) << 40N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 3n) << 32N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 4n) << 24N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 5n) << 16N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 6n) << 8N
          high = high | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 7n)

          let mut low = 0N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 8n) << 56N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 9n) << 48N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 10n) << 40N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 11n) << 32N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 12n) << 24N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 13n) << 16N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 14n) << 8N
          low = low | WasmI64.load8U(ipPointer, _ADDRESS_OFFSET + 15n)

          let high = WasmI32.toGrain(DataStructures.newInt64(high)): Number
          let low = WasmI32.toGrain(DataStructures.newInt64(low)): Number

          IPv6(BigInt.fromNumber(add(high * 0x100000000, low)))
        },
        _ => fail "unknown IP type",
      }

      let port = DataStructures.tagUint16(
        WasmI32.load16U(ipPointer, _PORT_OFFSET)
      )

      let flowInfo = WasmI32.toGrain(
        DataStructures.newUint32(WasmI32.load(ipPointer, _FLOW_INFO_OFFSET))
      ): Uint32

      let scopeId = WasmI32.toGrain(
        DataStructures.newUint32(WasmI32.load(ipPointer, _SCOPE_ID_OFFSET))
      ): Uint32

      let address = { address, port, flowInfo, scopeId }

      addresses = [address, ...addresses]
    }

    dropDnsIterator(id)

    addresses
  }

  @unsafe
  let _ID_PTR = Memory.malloc(8n)

  @unsafe
  provide let resolveTimeout = (host: String, timeout: Int64) => {
    use WasmI32.{ (+) }
    let hostPtr = WasmI32.fromGrain(host) + 8n
    let hostSize = WasmI32.load(WasmI32.fromGrain(host), 4n)

    let timeout = WasmI64.load(WasmI32.fromGrain(timeout), 8n)

    let result = resolve(hostPtr, hostSize, timeout, _ID_PTR)

    if (WasmI32.eqz(result)) {
      let id = WasmI64.load(_ID_PTR, 0n)
      Ok(resolveDNSIterator(id))
    } else {
      match (result) {
        9027n => Err("timed out"),
        _ => Err("unknown error"),
      }
    }
  }

  provide let resolve = (host: String) => {
    resolveTimeout(host, -1L)
  }
}

provide module Tcp {
  abstract type TcpListener = Int64
  abstract type TcpStream = Int64

  provide enum TcpError {
    FailedToResolveBindAddress,
    FailedToBind,
    FailedToAcceptConnection,
    TcpTimeout,
    TcpSocketClosed,
    TcpFlushFailed,
  }

  @unsafe
  let _ID_PTR = Memory.malloc(8n)
  @unsafe
  let _DNS_ITERATOR_PTR = Memory.malloc(8n)

  @unsafe
  provide let bind = address => {
    use WasmI32.{ (+) }

    let addresses = DNS.resolve(address)
    let ip = match (addresses) {
      Ok([ip, ..._]) => ip,
      _ => return Err(FailedToResolveBindAddress),
    }

    let mut ipType = 0n
    let mut ipPtr = 0n
    match (ip.address) {
      IPv4(addr) => {
        ipType = 4n
        ipPtr = WasmI32.load(WasmI32.fromGrain(addr), 4n)
      },
      IPv6(addr) => {
        ipType = 6n
        ipPtr = WasmI32.fromGrain(addr) + 16n
      },
    }

    let port = DataStructures.untagUint16(ip.port)
    let flowInfo = WasmI32.load(WasmI32.fromGrain(ip.flowInfo), 4n)
    let scopeId = WasmI32.load(WasmI32.fromGrain(ip.scopeId), 4n)

    let err = Networking.tcpBind(
      ipType,
      ipPtr,
      port,
      flowInfo,
      scopeId,
      _ID_PTR
    )
    ignore(ip)

    return if (WasmI32.eqz(err)) {
      Ok(
        WasmI32.toGrain(DataStructures.newUint64(WasmI64.load(_ID_PTR, 0n))):
          TcpListener,
      )
    } else {
      Err(FailedToBind)
    }
  }

  @unsafe
  provide let accept = (listener: TcpListener) => {
    let listenerId = WasmI64.load(WasmI32.fromGrain(listener), 8n)

    let err = Networking.tcpAccept(listenerId, _ID_PTR, _DNS_ITERATOR_PTR)
    return if (WasmI32.eqz(err)) {
      Ok(
        WasmI32.toGrain(DataStructures.newUint64(WasmI64.load(_ID_PTR, 0n))):
          TcpStream,
      )
    } else {
      Err(FailedToAcceptConnection)
    }
  }

  @unsafe
  let _BYTES_AFFECTED_PTR = Memory.malloc(8n)
  @unsafe
  let _SINGLE_IOV = Memory.malloc(8n)

  @unsafe
  provide let read = (stream: TcpStream, buffer: Bytes) => {
    use WasmI32.{ (+) }

    let streamId = WasmI64.load(WasmI32.fromGrain(stream), 8n)
    let mut bufPtr = WasmI32.fromGrain(buffer)
    let bufSize = WasmI32.load(bufPtr, 4n)
    bufPtr += 8n

    let err = Networking.tcpRead(streamId, bufPtr, bufSize, _BYTES_AFFECTED_PTR)
    match (err) {
      0n => {
        let bytesRead = WasmI32.wrapI64(WasmI64.load(_BYTES_AFFECTED_PTR, 0n))
        Ok(DataStructures.tagSimpleNumber(bytesRead))
      },
      1n => Err(TcpSocketClosed),
      _ => Err(TcpTimeout),
    }
  }

  @unsafe
  provide let write = (stream: TcpStream, buffer: Bytes) => {
    use WasmI32.{ (+) }

    let streamId = WasmI64.load(WasmI32.fromGrain(stream), 8n)
    let mut bufPtr = WasmI32.fromGrain(buffer)
    let bufSize = WasmI32.load(bufPtr, 4n)
    bufPtr += 8n

    WasmI32.store(_SINGLE_IOV, bufPtr, 0n)
    WasmI32.store(_SINGLE_IOV, bufSize, 4n)

    let err = Networking.tcpWriteVectored(
      streamId,
      _SINGLE_IOV,
      1n,
      _BYTES_AFFECTED_PTR
    )
    match (err) {
      0n => {
        let bytesWritten = WasmI32.wrapI64(
          WasmI64.load(_BYTES_AFFECTED_PTR, 0n)
        )
        Ok(DataStructures.tagSimpleNumber(bytesWritten))
      },
      1n => Err(TcpSocketClosed),
      _ => Err(TcpTimeout),
    }
  }

  provide let writeString = (stream, string: String) => {
    write(stream, magic(string))
  }

  @unsafe
  provide let clone = (stream: TcpStream) => {
    let streamId = WasmI64.load(WasmI32.fromGrain(stream), 8n)
    let newId = Networking.cloneTcpStream(streamId)
    WasmI32.toGrain(DataStructures.newUint64(newId)): TcpStream
  }

  @unsafe
  provide let flush = (stream: TcpStream) => {
    let streamId = WasmI64.load(WasmI32.fromGrain(stream), 8n)
    let err = Networking.tcpFlush(streamId, _ID_PTR)
    match (err) {
      0n => Ok(void),
      _ => Err(TcpFlushFailed),
    }
  }
}
